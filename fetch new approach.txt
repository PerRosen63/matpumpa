You're right, fetching all products every time you need to update a single product's stock quantity is inefficient and will lead to slow performance.

Here's a more optimized approach that focuses on updating only the necessary data:

1. Update AppContext.tsx:

// ... other imports and interfaces ...

interface AppContextProps {
  // ... other props
  updateProductStock: (productId: number, newStockQuantity: number) => void; // Add this function
}

// ... rest of your AppProvider component

export const AppProvider: React.FC<AppProviderProps> = ({
  // ... your props
}) => {
  // ... your existing state variables ...

  // Function to update product stock in the context
  const updateProductStock = (productId: number, newStockQuantity: number) => {
    // Update the products array in the context
    setProducts((prevProducts) =>
      prevProducts.map((product) =>
        product.id === productId
          ? { ...product, stock_quantity: newStockQuantity }
          : product
      )
    );

    // Update the selectedProduct if it matches the updated product
    if (selectedProduct && selectedProduct.id === productId) {
      setSelectedProduct((prevProduct) => ({
        ...prevProduct,
        stock_quantity: newStockQuantity,
      }));
    }
  };

  // ... your existing fetchProduct function ...

  return (
    <AppContext.Provider
      value={{
        // ... other context values
        updateProductStock, // Add the updateProductStock function to the context
      }}
    >
      {children}
    </AppContext.Provider>
  );
};

export default AppContext;
2. Update ProductOrderForm.tsx:

import config from "../config.ts";
import { useContext } from "react";
import AppContext from "../context/AppContext";

export const ProductOrderForm = () => {
  const { selectedProduct, updateProductStock } = useContext(AppContext) ?? {
    selectedProduct: null,
    updateProductStock: () => {}, // Provide a default empty function
  };

  const handleAddToCart = async () => {
    if (!selectedProduct) return;

    const newStockQuantity = selectedProduct.stock_quantity
      ? selectedProduct.stock_quantity - 1
      : 0; // Or handle out-of-stock case differently

    try {
      const response = await fetch(
        `${config.baseUrl}/${selectedProduct.id}?consumer_key=${config.consumerKey}&consumer_secret=${config.consumerSecret}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            stock_quantity: newStockQuantity,
          }),
        }
      );

      if (response.ok) {
        // Update the stock quantity in the context
        updateProductStock(selectedProduct.id, newStockQuantity);
        console.log("Stock updated!");
      } else {
        console.error("Failed stock update!");
      }
    } catch (error) {
      console.error("Error updating stock quantity:", error);
    }
  };

  // ... rest of your ProductOrderForm component ...
};
Explanation:

updateProductStock Function: We've added a new function updateProductStock to your AppContext. This function takes the productId and the newStockQuantity as arguments. It updates both the products array and the selectedProduct (if it matches) in the context with the new stock quantity.
Call updateProductStock in handleAddToCart: After successfully updating the stock quantity on the server, we call updateProductStock to update the context directly. This eliminates the need to re-fetch all products.
How it Works Now:

Add to Cart: When the user clicks "Add to Cart", handleAddToCart is called.
Update Server: The stock quantity is updated on the server using the WooCommerce API.
Update Context: The updateProductStock function is called, updating the products array and selectedProduct in the context with the new stock quantity.
Component Re-renders: The relevant components (e.g., ProductOrderForm, Products if the product is listed there) will re-render automatically because they are using the updated data from the context.
Benefits of this Approach:

Performance: You're only updating the necessary data in the context, avoiding the overhead of fetching all products again.
Responsiveness: The UI updates immediately after the stock quantity is updated on the server, providing a better user experience.
Data Consistency: You're maintaining consistency between the server data and the data displayed in your application.
This optimized approach should significantly improve the performance of your application and provide a more responsive user experience.